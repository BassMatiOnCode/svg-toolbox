<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-12-20" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2025-03-15" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2025-03-15" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/webcat/page-structure/tutorial-page.css" />
<script type="module" src="/inc/webcat/page-structure/tutorial-page.js" ></script>
 
<meta name="categories" content="Projects > SVG Toolbox" />
<meta name="tags" content="web, authoring, toolbox, SVG, JavaScript, component, line" />
<meta name="description" content="" />

<title>Line (SVG-Toolbox > Line)</title>

</head><body>

<h1>Line</h1><p class="subtitle">A wrapper for the SVG line element</p>

<h2 cbc>Introduction</h2><div>

<p>The <tt>Line</tt> class is a wrapper for the SVG <tt>line</tt> element. It encapsulates the </p>

<!--h2--Introduction--></div>

<h2 cbc>Using the Component</h2><div>

<p>The component consists of a single file:</p>

<ul>
<li>path/to/line.js</li>
</ul>

<p>Use an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">import</a> statement to import the module and get access to the exported symbols.</p>

<!--h2--Using the Component--></div>

<h2 cbc>Examples</h2><div>

<h3 cbc>Example 1</h3><div>

<p>The SVG code has a line element defined:</p>

<figure class="listing"><figcaption>SVG code</figcaption><pre>
&lt;svg id="svgRoot" ... &gt;
&lt;g id="main"&gt;
	&lt;line id="LineA" x1="-50" y1="50" x2="50" y2="-40" /&gt;
	&lt;/g&gt;
&lt;/svg&gt;
</pre></figure>

<p>The first steps create a <tt>Line</tt> wrapper object for this SVG element:</p>

<figure class="listing"><figcaption></figcaption><pre>
&lt;script type="module"&gt;
import { <hi>Line</hi> } from "path/to/line.js" ;

	<cc>// Create a Line wrapper object from the exising SVG element line-001</cc>
const lineA = new Line( { from: "LineA" } );

	<cc>// Move it to the left</cc>
lineA.x1 -= 10 ;
lineA.x2 -= 10 ;
</pre></figure>

<p>It does not make sense to supply coordinates or attributes if a <tt>from</tt> value is supplied, because no new SVG element is created in this case. Only the coordinate values are extracted.</p>

<p>Setting the coodinates of the <tt>Line</tt> object also moves the related SVG element.</p>

<p>The next instruction creates a new SVG <tt>line</tt> element by using the coordinates of LineA:</p>

<figure class="listing"><figcaption></figcaption><pre>
	<cc>// Create a copy with slightly changed coordinates</cc>
const lineB = new Line( { x1: lineA.x1+20, y1: lineA.y1, x2: lineA.x2+20, y2: lineA.y2, attributes: { id: "LineB", stroke: "blue" } } );
&lt;/script&gt;
</pre></figure>

<p>The demo:</p>

<figure class="demo"><figcaption> (<a href="demo-01.htm" target="_blank">demo-01.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-01.htm"></object>
</figure>

<!--h3--Example 1--></div>

<h3 cbc>Example 2: Perpendicular Line</h3><div>

<p>The method <tt>perpendicularThrough( )</tt> computes the coordinates for a perpedicular line through a point. We start with an existing SVG line A:</p>

<figure class="listing"><figcaption>The SVG line element</figcaption><pre>
&lt;svg id="svgRoot" ... &gt;
&lt;line id="LineA" x1="-50" y1="50" x2="50" y2="-40" /&gt;
&lt;/svg&gt;
</pre></figure>

<p>Then create a <tt>Line</tt> wrapper:</p>

<figure class="listing"><figcaption>The <tt>Line</tt> wrapper</figcaption><pre>
import { Line } from "../code/line/line.js" ;
const <hi>lineA</hi> = new Line( { <hi>from</hi>: "LineA" } );
</pre></figure>

<p>The <tt>midPoint</tt> property gives us a point structure, which is then used as reference point for the method <tt>perpendicularThrough()</tt>:</p>

<figure class="listing"><figcaption>The <tt>Line</tt> wrapper</figcaption><pre>
const <hi>midpoint</hi> = lineA.<hi>midPoint</hi>;
{	
	const { p1, p2 } = lineA.<hi>perpendicularThrough</hi>( midpoint, { x1: lineA.x1, x2: lineA.x2 } );
	const <hi>lineB</hi> = new Line( { p1: <hi>p1</hi>, p2: <hi>p2</hi>, attributes: { stroke: "green" } } ) ; 
	console.debug( lineB.slope, lineB.p1, lineB.p2 );
	debugger;
	}
</pre></figure>

<p>The method return the start and end points p1, p2 for a line which goes through the mid point of line A, and is perpendicular to line A:</p>

<figure class="demo"><figcaption>Perpendicular line (<a href="demo-02.htm" target="_blank">demo-02.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-02.htm"></object>
</figure>

<p>By varying the start and end point conditions for <tt>perpendicularThrough()</tt>, we can get four different lines and orientations. The demo has a <tt>debugger</tt> instruction after each variant. The lines are colored differently, and combinded with the console output, you can see how they are created and that they all have the correct slope and orientation.</p>

<!--h3--Example 2: Perpendicular Line--></div>

<!--h2--Examples--></div>

<h2 cbc>Programming Reference</h2><div>

<h3 cbc>Constructor</h3><div>

<p>Syntax:</p>

<pre>constructor ( { x1, y1, x2, y2, from, attributes={ }, options={ } } )</pre>

<p>Parameters:</p>
<dl>
<dt>x1, y1, x2, y2</dt>
	<dd>{number | undefined} Coordinates of the start and end point. An undefined value will cause the default value (0) to be used in the SVG element.</dd>
<dt>from</dt>
	<dd>{SVGLineElement} A reference to an existing SVG line element, for which a wrapper object is created. No new SVG element will be created. Coordinate values, <tt>attributes</tt> and <tt>options</tt> will be ignored.</dd>
<dt>attributes</dt>
	<dd>{object} An associative array of name-value pairs, which are used to set attributes on the new SVG element.</dd>
<dt>options</dt>
	<dd>{object} An associative array of name-value pairs, which is passed to <a href="../core/core.htm#addSvgElement">addSvgElement()</a>.</dd>
<dt>returns</dt>
	<dd>{Line} A new instance of a <tt>Line</tt> object.</dd>
</dl>

<p>The constructor function uses named parameters, because most of them are optional. They must be supplied in an object wrapper. The constructor then uses a destructuring assignment to set the individual parameter values.</p>

<figure class="listing"><figcaption>Examples</figcaption><pre>
const lineB = new Line( { lineA } );
const lineC = new Line( { x1: -20, x2: +20, attributes: { stroke: "green" }, options: { injectionTarget: "main" } } ) ;
</pre></figure>

<p></p>

<!--h3--Constructor--></div>

<h3 cbc>x1, y1, x2, y2</h3><div>

<p>Properties, read-write access, {number}. Coordinate values of the start and end points of the related SVGLine element.</p>

<!--h3--x1, y1, x2, y2--></div>

<h3 cbc>p1, p2</h3><div>

<p>Properties, read-write, {Point}. Start and end points of the related SVGLine element. Internally mapped to the points x1, y1, x2, y2.</p>

<!--h3--p1, p2--></div>

<h3 cbc>midPoint</h3><div>

<p>Property, read-only, {Point}. Returns the coordinates of the mid point between start and end points.</p>

<!--h3--midPoint--></div>

<h3 cbc>slope</h3><div>

<p>Property, read-only, {Number}. Returns the ratio dy/dx of start and end points. Equivalent to <tt>tan( α )</tt>, with α being the angle between the line and the x-axis.</p>

<!--h3--slope--></div>

<h3 cbc>perpendicularThrough()</h3><div>

<p>Instance method. Creates the start and end points for a perpendicular line.</p>

<p>Syntax:</p>

<pre>perpendicularThrough({x,y},{x1,y1,x2,y2})</pre>

<p>Parameters:</p>
<dl>
<dt>{ x, y }</dt>
	<dd>{Point} The point through which the perpendicular will go through.</dd>
<dt>x1, y1, x2, y2</dt>
	<dd>{Number}, semi-optional. Conditions for the start and end points of the line.</dd>
	<dd>Only one value for a point can be given, the corresponding other will be calculated.</dd>
<dt>returns</dt>
	<dd>{TwoPoint} An object with two {Point} structures, <tt>p1</tt> and <tt>p2</tt>.</dd>
</dl>

<p>Example:</p>

<figure class="listing"><figcaption>Coordinates for a perpendicular</figcaption><pre>
const { p1, p2 } = lineA.perpendicularThrough( {x: x0, y: x1}, { x1: lineA.x1, x2: lineA.x2 } );
const { p3, p4 } = lineA.perpendicularThrough( lineA.midPoint, { x1: lineA.x2, y2: lineA.y1 } );
</pre></figure>

<p>Demo:</p>

<figure class="demo"><figcaption>Perpendicular lines (<a href="demo-02.htm" target="_blank">demo-02.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-02.htm"></object>
</figure>

<!--h3--perpendicularThrough()--></div>

<!--h2--Programming Reference--></div>

<h2 cbc="collapsed">Implementation Details</h2><div>

<p>For implementation details, refer to the <a href="../code/line/line.js">module sourcecode</a>.</p>

<!--h2--Implementation Details--></div>

</body></html>