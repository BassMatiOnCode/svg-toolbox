<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-12-20" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2025-03-16" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2025-03-16" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/webcat/page-structure/tutorial-page.css" />
<script type="module" src="/inc/webcat/page-structure/tutorial-page.js" ></script>
 
<meta name="categories" content="Projects > SVG Toolbox > Ellipse" />
<meta name="tags" content="web, authoring, toolbox, SVG, JavaScript, component, module, ellipse" />
<meta name="description" content="" />

<title>Ellipse (SVG-Toolbox > Ellipse)</title>

</head><body>

<h1>Ellipse</h1><p class="subtitle">One of the more interesting geometric objects</p>

<h2 cbc>Introduction</h2><div>

<p></p>

<!--h2--Introduction--></div>

<h2 cbc>Using the Component</h2><div>

<p>The component consists of a single file:</p>

<ul>
<li>path/to/ellipse.js</li>
</ul>

<p>Use an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">import</a> statement to import the module and get access to the exported symbols.</p>

<!--h2--Using the Component--></div>

<h2 cbc>Examples</h2><div>

<h3 cbc>Example 1: Creating Ellipses</h3><div>

<p>To create ellipses, import the ellipse module and call the <tt>Ellipse</tt> constructor:</p>

<figure class="listing"><figcaption></figcaption><pre>
import { Ellipse } from "../code/ellipse/ellipse.js" ;
const ellipseA = new Ellipse( { fromEllipse: "EllipseA" } ) ;
const ellipseB = new Ellipse( { x: 50, rx: 20, ry: 90, attributes: { stroke: "red" } } ) ;
</pre></figure>

<p>The demo:</p>

<figure class="demo"><figcaption>Creating ellipses (<a href="demo-01.htm" target="_blank">demo-01.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-01.htm"></object>
</figure>

<p>The console output shows the ellipse characteristics:</p>

<figure class="listing"><figcaption></figcaption><pre>
Orientation: vertical
a: 90
b: 20
c: 87.74964387392122
e: 0.974996043043569
</pre></figure>

<!--h3--Example 1: Creating Ellipses--></div>

<h3 cbc>Example 2: Tangent Through Point</h3><div>

<p>To create a tangent through a point on the ellipse, we need to get a point on the ellipse, then the slope at that point, which then can be used to create a tangen line:</p>

<figure class="listing"><figcaption>Tangent through point</figcaption><pre>
const ellipse = new Ellipse( { x: -10, y: 10, rx: 80, ry: 30 } ) ;
const p = ellipse.<hi>pointAt</hi>( { x: 20 }, +1 );
const slope = ellipse.<hi>slopeAt</hi>( p );
Line.<hi>throughPoint</hi>( p, slope, { x: -50 }, { x: +50 } );
</pre></figure>

<p>Demo:</p>

<figure class="demo"><figcaption>Tangent through point (<a href="demo-05.htm" target="_blank">demo-05.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-05.htm"></object>
</figure>

<!--h3--Example 2: Tangent Through Point--></div>

<h3 cbc>Example 3: Normal Through Point</h3><div>

<p>To create a normal throug a point on the ellipse, we use the same technique as for a tangent through point, but we use the inverted reciproke of the slope:</p>

<figure class="listing"><figcaption>Normal through point</figcaption><pre>
const p = ellipse.pointAt( { x: 20 }, +1 );
const slope =<hi> -1 / ellipse.slopeAt( p )</hi>;
Line.throughPoint( p, slope, { x: -50 }, { x: +50 } );
</pre></figure>

<p>Demo:</p>

<figure class="demo"><figcaption>Normal through point (<a href="demo-06.htm" target="_blank">demo-06.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-06.htm"></object>
</figure>

<!--h3--Example 3: Normal Through Point--></div>

<!--h2--Examples--></div>

<h2 cbc>Programming Reference</h2><div>

<h3 cbc>constructor()</h3><div>

<p>Syntax:</p>

<pre>
constructor({fromEllipse})
constructor({p1,p2,fromEllipse,attributes={},options={}})
constructor({p1,rx,ry,fromEllipse,attributes={},options={}})
constructor({x,y,rx,ry,fromEllipse,attributes={},options={}})
</pre>

<p>Parameters:</p>

<dl>
<dt>fromEllipse</dt>
	<dd>{SVGEllipseElement | string} References the SVGEllipseElement to create an Ellipse wrapper for.</dd>
<dt>p1</dt>
	<dd>{Point} The center point if combined with<tt>rx</tt> and <tt>ry</tt>, or the top left corner of an enclosing rectangle if combinded with<tt>p2</tt>.</dd>
<dt>p2</dt>
	<dd>{Point} The bottom right corner of an enclosing rectangle.</dd>
<dt>rx, ry</dt>
	<dd>{number} the radii of the horizontal and vertical axes.</dd>
<dt>attributes</dt>
	<dd>{object} An associative array with name-value pairs that define the attributes for the new element.</dd>
<dt>options</dt>
	<dd>{object}  An associative array with name-value pairs that provide options to <tt>addSvgElement()</tt>.</dd>
<dt>returns</dt>
	<dd>{Ellipse} An <tt>Ellipse</tt> object that encapsulates an <tt>SVGEllipseElement</tt>.</dd>
</dl>

<p>Examples:</p>

<figure class="listing"><figcaption></figcaption><pre>
const ellipseA = new Ellipse( { fromEllipse: "EllipseA" } ) ;
const ellipseB = new Ellipse( { x: 50, rx: 20, ry: 90, attributes: { stroke: "red" } } ) ;
</pre></figure>

<p>Demo:</p>

<figure class="demo"><figcaption>Creating Ellipses (<a href="demo-01.htm" target="_blank">demo-01.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-01.htm"></object>
</figure>

<!--h3--constructor()--></div>

<h3 cbc>pointAt()</h3><div>

<p>Returns a point on the ellipse that matches the specified x or y coordinate.</p>
<p>Syntax:</p>

<pre>pointAt ( p, sign=1 )</pre>

<p>Parameters:</p>
<dl>
<dt>p</dt>
	<dd>{Point} A semi-specified point, either <tt>p.x</tt> or <tt>p.y</tt> must be undefined; this value will be computed.</dd>
	<dd>If the input value is outside the ellipse, NaN is returned for the computed coordinate. This usually leads to a console error message in subsequent function.</dd>
<dt>sign</dt>
	<dd>{+1 | -1} Determines wheter the computed coordinate is inverted (-1), or not (+1).</dd>
<dt>returns</dt>
	<dd>{Point} The input point p, completed with the calculated coordinate value.</dd>
	<dd></dd>
</dl>

<p>The following example initializes a point structure with an x-coordinate, then calls <tt>pointAt()</tt> to calculate the related y-coordinate to create a circle at that point.</p>

<figure class="listing"><figcaption>Points on a horizontally oriented ellipse</figcaption><pre>
const p = { x: 10 };
p.y = ellipseA.<hi>pointAt</hi>( p );
new Circle( { p, r: 3 } );
p.y *= -1 ;
new Circle( { p, r: 3 } );
</pre></figure>

<p>The second circle is created with an inverted y-coordinate, because that is also a valid point on the ellipse.</p>

<p>The sequence above can be streamlined into a single line:</p>

<figure class="listing"><figcaption>Points on a horizontally oriented ellipse</figcaption><pre>
new Circle( { ellipseA.pointAt( { x: <hi>10</hi> } ), r: 3 } );
new Circle( { ellipseA.pointAt( { x: <hi>10</hi> }, <hi>-1</hi> ), r: 3 } );
</pre></figure>

<p>Note that the second call to <tt>pointAt()</tt> returns an inverted y-coordinate.</p>

<p> Alternatively, you can specify <em>y-coordinates</em> in the <tt>p</tt> argument:</p>

<figure class="listing"><figcaption>Points on a horizontally oriented ellipse</figcaption><pre>
new Circle( { ellipseA.pointAt( { y: <hi>10</hi> } ), r: 3 } );
</pre></figure>

<p>Demo:</p>

<figure class="demo"><figcaption>Points on the ellipse (<a href="demo-02.htm" target="_blank">demo-02.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-02.htm"></object>
</figure>

<p>Note that the demo also specifies points outside of the ellipse, which leads to invalid results. Observe the console output!</p>

<p>This also works on a vertically oriented ellipse:</p>

<figure class="listing"><figcaption>Points on a horizontally oriented ellipse</figcaption><pre>
const ellipseA = new Ellipse( { rx: 30, ry: 80 } ) ;
	<cc>// specify x-coordinate</cc>
new Circle( { p1: ellipseA.pointAt( { x: 0 } ), r: 3 } );
new Circle( { p1: ellipseA.pointAt( { x: 10 } ), r: 3 } );
new Circle( { p1: ellipseA.pointAt( { x: 20 } ), r: 3 } );
new Circle( { p1: ellipseA.pointAt( { x: 30 } ), r: 3 } );
new Circle( { p1: ellipseA.pointAt( { x: 40 } ), r: 3, attributes: { stroke: "red" } } );
	<cc>// specify y-coordinate</cc>
new Circle( { p1: ellipseA.pointAt( { y: 0 }, -1 ), r: 3 } );
new Circle( { p1: ellipseA.pointAt( { y: -20 }, -1 ), r: 3 } );
new Circle( { p1: ellipseA.pointAt( { y: -40 }, -1 ), r: 3 } );
new Circle( { p1: ellipseA.pointAt( { y: -60 }, -1 ), r: 3 } );
new Circle( { p1: ellipseA.pointAt( { y: -80 }, -1 ), r: 3 } );
new Circle( { p1: ellipseA.pointAt( { y: -90 }, -1 ), r: 3, attributes: { stroke: "red" } } );
</pre></figure>

<p>Demo:</p>

<figure class="demo"><figcaption>Point on vertically oriented ellipse (<a href="demo-03.htm" target="_blank">demo-03.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-03.htm"></object>
</figure>


<!--h3--pointAt()--></div>

<h3 cbc>slopeAt()</h3><div>

<p>Returns the slope of a tangent at a point p on the ellipse.</p>

<p>Syntax:</p>

<pre>
slopeAt( { p: point } )
slopeAt( { x: point.x, y: point.y } );
</pre>

<p>Parameters:</p>
<dl>
<dt>p</dt>
	<dd>{Point} Coordinates of a point on the ellipse.</dd>
<dt>x, y</dt>
	<dd>{number} Coordinates of a point on the ellipse.</dd>
<dt>returns</dt>
	<dd>{number} The slope of a tangent through that point.</dd>
</dl>

<!--h3--slopeAt()--></div>

<h3 cbc>tangentAt()</h3><div>

<p>Syntax:</p>

<pre>
tangentAt( p, p1={ }, p2={ } )
</pre>

<p>Parameters:</p>
<dl>
<dt>p</dt>
	<dd>{Point} A point on the ellipse.</dd>
<dt>p1, p2</dt>
	<dd>{Point} Optional. Semi-defined end points for the line.</dd>
	<dd>If a point is not given, it will be set equal to the point p on the ellipse.</dd>
<dt>returns</dt>
	<dd>{{Point, Point}} The two completed end points p1 and p2, ready to create a line.</dd>
</dl>

<p>Examples:</p>

<figure class="listing"><figcaption></figcaption><pre>
const p = ellipseA.pointAt( { x: -40 }, -1 );
new Circle( { p1: p, r: 3 } );
const { p1, p2 } = ellipseA.tangentAt( p, { x: p.x - 50 }, { x: p.x + 50 } );
new Line( { p1: p1, p2: p2 } );
const { p1, p2 } = ellipseA.tangentAt( p, { y: p.y - 50 }, { y: p.y + 50 } );
new Line( { p1: p1, p2: p2 } );
</pre></figure>

<p>Demo:</p>

<figure class="demo"><figcaption>Tangent through point on the ellipse (<a href="demo-04.htm" target="_blank">demo-04.htm</a>)</figcaption>
<object class="content-height-observed no-border" type="text/html" data="demo-04.htm"></object>
</figure>

<!--h3--tangentAt()--></div>

<!--h2--Programming Reference--></div>

<h2 cbc="collapsed">Implementation Details</h2><div>

<p>For the complete implementation details, refer to the <a href="../code/ellipse/ellipse.js">module sourcecode</a>.</p>

<h3 cbc>Normal Through External Point</h3><div>

<p>The normal through an external point is one of the more difficult problems. An assumption, that we can calculate an ellipse through the external point with the same b/a ratio as the original ellipse and calculate the normal there, came up with a near-perfect solution.</p>

<p>Another idea was to keep the numeric excentricity e in original and calculated ellipse contant, was ruled out because that led to even larger errors.</p>

<p>The third attempt uses an approximation suggested by mathpages.com <a href="#{1]">[1]</a>.</p>

<figure class="listing"><figcaption></figcaption>
<pre>
<cc>// Comment</cc> 
function <hi>name</hi> ( ) {
	...
	}
</pre></figure>

<!--h3--Normal Through External Point--></div>

<!--h2--Implementation Details--></div>

<h2 cbc>References</h2><div>

<dl>
<dt id="[1]"><a href="https://www.mathpages.com/home/kmath505/kmath505.htm">Normals From A Pint To An Ellipse</a></dt>
	<dd>on mathpages.com</dd>
<dt id="[2]"><a href="https://math.stackexchange.com/questions/609351/number-of-normals-from-a-point-to-an-ellipse">Number of normals from a point to an ellipse</a></dt>
	<dd>By Empy2 on math.stackexchange.com</dd>
<dt id="[3]"><a href="https://homepage.villanova.edu/robert.jantzen/maple/ellipse/apollonius.pdf">Apollonius' Ellipse and Evolute Revisited</a></dt>
	<dd>Frederick Hartmann, Robert Jantzen</dd>
</dl>

<!--h2--References--></div>

</body></html>